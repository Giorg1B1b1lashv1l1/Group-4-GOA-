 Javascript Engine 

როგორ მუშაობს კოდი პროგრამირების ენებში?
ყველა პროგრამირების ენას გააჩნია თავისი ძრავა(როგორც ავტომობილს და ა.შ)
ეს ძრავა პროგრამისტის მიერ დაწერილ კოდს გარდაქმნის მანქანურ კოდათ(Machine level language) ანუ ორობით კოდად (binary code- 10101001101)
Javascript-ს აქვს რამდენიმე ძრავა რომელებიც მუშაობენ სხვადასხვა ბრაუზერებში, მაგალითად:
Google Chrome - იყენებს javascript-ის ძრავს სახელად : V8Engine
Firefox - იყენებს javascipt -ის ძრავს სახელად : Spider Monkey
Safari-იყენებს javascript-ს ძრავს სახელად:JavaScriptCore
internet Explorer -ი იყენებს javascript-ის ძრავს სახელად:Chakra
ყველა ძრავა მუშაობს ერთნაირად

  კომპილაცია და ინტერპრეტაცია

პროგრამირების ენა არის ორი ტიპის ინტერპრეტირებული და კომპილატორი

  კომპილაციის როლი:
    1.კომპილერები კითხულობენ კოდს , შედეგი არის შესრულებადი კოდი
    2.თარგმნის პროგრამას ინსტრუქციებად ,რომელიც დაწერილია higher level language(JS)-ით, ის გარდაიქმნება ისეთი ტექსტის ფორმატებად რომელსაც cpu(პროცესორი) მიხვდება და გაიგებს
    3.კომპილაციის პროცესი შედარებით რთულია ამიტომ ის ხარჯავს ძალიან ბევრ დროს ანალიზში და პროგრამის დამუშავებაში
    4.შესრულების შედეგი არის მანქანური კონკრეტულად ორობითი კოდის ფორმა binary code

  ინტერპრეტაციის როლი:
    1.ინტერპრეტატორი გარდაქმნის კოდს ხაზ-ხაზ, კოდის გაშვების დროს
    2.ინტერპრეტატორი მთლიანად თარგმნის პროგრამას, რომელიც დაწერილია higher level language(js)-ით, მანქანურ კოდში Machine level language
    3. ინტერპრეტატორი იძლევა შეფასების და შეცვლის საშუალებას სანამ პროგრამა შესრულდება
    4.სჭირდება შედარებიტ ნაკლები დრო ანალიზში და პროგრამის დამუშავებაში
    5.პროგრამა სრულდება შედარებით ნელა კომპილერთან შედარებით

    javascipt-არის როგორც ინტერპრეტირებული ასევე კომპილატორი, ამ ორის ერთად შეერთებას ჰქვია 
    JIT(just in time)
  JIT-კომპილერი:
    JIT- კომპილერი მუშაობს დინამიურად , იგი კოდს გარდაქმნის მანქანურ კოდად და საშუალებას აძლევს კოდს შესრულდეს უფრო სწრაფად ვიდრე ინტერპრეტატორი


  Memory life cycle

  Stack and Heap Memory  


  Stack---------------------------
  Stack - static memory allocation(სტატიკური მეხსიერების გამოყოფა)
  Static-სტატიკური ცვლადები ჰქვიათ ისეთ ცვლადებს როგორიცაა (string,Number,boolean, undefined , null...) , რომლებსაც გააჩნიათ თავისი ზომა და კომპილაციის(გარდაქმნის) დრო

  Stack- არის სივრცე,ადგილი სადაც ინახება Primitive values(პრიმიტიული მნიშვნელობები) და References()


  Heap -------------------------------------

  Heap- ში ინახება objects და functions სტატიკური მეხსიერებისგან განსხვავებით მას არ გააჩნია თავისი ზომა და კომპილაციის დრო

  References- როდესაც ჰიპში ვინახავთ მნიშვნელობებს არეულად ,  ავტომატურად stack-ში  ინახება References(ანუ გასაღები) რითაც შეგვიძლია მივწვდეთ Heap-ში არსებულ მნიშვნელობებს
     

  Call Stack

  Call stack - აკვირდება ფუნქციებს , მასში ინახება ფუნქციის არგუმენტები და ლოკალური ცვლადები ანუ ფუნქციის შიგნით შექმნილი ცვლადები 

  Call stack- იყენებს ასეთ მექანიზმს last in , first out ეს ეხმარება მეხსიერებას იმაში რომ  არ გადაივსოს , ანუ ყოველი ახალი შემოსული ელემენტი დგება პირველ ადგილას რადგან აქამდე პირველ ადგილზე მყოფი უკვე შესრულებულია